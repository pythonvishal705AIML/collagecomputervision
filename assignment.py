# -*- coding: utf-8 -*-
"""assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HvnAkQ2-4cRD16q2abPKhAEhoz6-4YNf
"""

import cv2 as cv
import numpy as np
import os

vid_path = r"/content/new1234.mp4"
vidcap = cv.VideoCapture(vid_path)


width = int(vidcap.get(cv.CAP_PROP_FRAME_WIDTH))
height = int(vidcap.get(cv.CAP_PROP_FRAME_HEIGHT))
frame_count = int(vidcap.get(cv.CAP_PROP_FRAME_COUNT))
fps = vidcap.get(cv.CAP_PROP_FPS)

print(f"Video Width: {width}")
print(f"Video Height: {height}")
print(f"Frame Count: {frame_count}")
print(f"Frames Per Second (FPS): {fps}")

import cv2 as cv
import matplotlib.pyplot as plt

vidcap = cv.VideoCapture('vid_path ')
while True:
    ret, frame = vidcap.read()

    if ret:
        cv.imshow('Video', frame)

        if cv.waitKey(25) & 0xFF == ord('q'):
            break
    else:
        break

vidcap.release()
cv.destroyAllWindows()

def extract_frames(vid_path, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    cap = cv.VideoCapture(vid_path)
    frame_count = int(cap.get(cv.CAP_PROP_FRAME_COUNT))
    fps = cap.get(cv.CAP_PROP_FPS)

    frame_idx = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        frame_path = os.path.join(output_folder, f'frame_{frame_idx:04d}.png')
        cv.imwrite(frame_path, frame)
        frame_idx += 1

    cap.release()
    return frame_idx, fps

vid_path = r"/content/new1234.mp4"
output_folder = "out"
frame_count, fps = extract_frames(vid_path, output_folder)
print(f"Extracted {frame_count} frames at {fps} FPS.")

image_folder = r'/content/out'

output_dir = 'enhanced_images'
os.makedirs(output_dir, exist_ok=True)

def increase_brightness(img, value=30):
    hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)  #
    h, s, v = cv.split(hsv)
    v = cv.add(v, value)
    v[v > 255] = 255
    v[v < 0] = 0
    final_hsv = cv.merge((h, s, v))
    img_bright = cv.cvtColor(final_hsv, cv.COLOR_HSV2BGR)
    return img_bright

def increase_contrast(img, alpha=1.2, beta=0):
    return cv.convertScaleAbs(img, alpha=alpha, beta=beta)

for filename in os.listdir(image_folder):
    image_path = os.path.join(image_folder, filename)

    if not (filename.endswith('.png') or filename.endswith('.jpg') or filename.endswith('.jpeg')):
        continue

    img = cv.imread(image_path)

    if img is None:
        print(f"Failed to load image from {image_path}")
        continue

    bright_img = increase_brightness(img, value=50)

    enhanced_img = increase_contrast(bright_img, alpha=1.3, beta=10)

    output_path = os.path.join(output_dir, f'enhanced_{filename}')
    cv.imwrite(output_path, enhanced_img)

print(f"Images saved successfully in '{output_dir}' directory.")

def create_video_from_images(image_folder, output_video_path, fps=30):
    images = [img for img in os.listdir(image_folder) if img.endswith(".png") or img.endswith(".jpg")]

    images.sort()

    frame = cv2.imread(os.path.join(image_folder, images[0]))
    height, width, layers = frame.shape

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    video = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))

    for image in images:
        video.write(cv2.imread(os.path.join(image_folder, image)))

    video.release()

image_folder = r'/content/enhanced_images'
output_video_path = 'output_video.mp4'
create_video_from_images(image_folder, output_video_path)

!wget -O data/coco.names https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names

